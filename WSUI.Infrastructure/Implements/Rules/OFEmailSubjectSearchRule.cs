///////////////////////////////////////////////////////////
//  EmailSubjectSearchRule.cs
//  Implementation of the Class EmailSubjectSearchRule
//  Generated by Enterprise Architect
//  Created on:      29-Sep-2013 10:41:48 AM
//  Original author: Yariki
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Microsoft.Practices.Unity;
using Nest;
using OF.Core.Core.AdvancedSearchCriteria;
using OF.Core.Core.Rules;
using OF.Core.Data.ElasticSearch;
using OF.Core.Data.ElasticSearch.Request;
using OF.Core.Data.ElasticSearch.Request.Email;
using OF.Core.Enums;
using OF.Core.Extensions;
using OF.Infrastructure.Implements.Rules.BaseRules;

namespace OF.Infrastructure.Implements.Rules
{
    public class OFEmailSubjectSearchRule : OFBaseEmailSearchRule
    {

        public OFEmailSubjectSearchRule(IUnityContainer container)
            : this(null, container)
        {
            Priority = 2;
        }

        public OFEmailSubjectSearchRule(object lockObject, IUnityContainer container)
            : base(lockObject, container)
        {
            Priority = 2;
        }

        protected override bool GetIncludedInAdvancedMode()
        {
            return true;
        }

        public override void Init()
        {
            RuleName = "EmailSubject";
            base.Init();
        }

        protected override Expression<Func<OFEmail, string>> GetSearchedProperty()
        {
            return e => e.Subject;
        }


        protected override OFBody GetSearchBody()
        {
            var preparedCriterias = GetKeywordsList();
            var body = new OFBodySort();
            body.sort = new OFSortDateCreated();
            if (preparedCriterias.Count > 1)
            {
                var query = new OFQueryBoolMust<OFQueryMatchPhrase<OFSubjectMatchPhrase>>();
                body.query = query;
                foreach (var preparedCriteria in preparedCriterias)
                {
                    var term = new OFQueryMatchPhrase<OFSubjectMatchPhrase>(new OFSubjectMatchPhrase(){subject = preparedCriteria.Result});
                    query._bool.must.Add(term);
                }
                return body;
            }
            if (preparedCriterias.All(p => p.Type == ofRuleType.Quote))
            {
                var criteria = preparedCriterias.FirstOrDefault(p => p.Type == ofRuleType.Quote);
                body.query = new OFQueryMatchPhrase<OFSubjectMatchPhrase>(new OFSubjectMatchPhrase() { subject = criteria.Result });
                return body;
            }
            body.query = new OFQueryMatchPhrase<OFSubjectMatchPhrase>(new OFSubjectMatchPhrase() { subject = Query });
            return body;
        }


        protected override OFBody GetAlternativeSearchBody()
        {
            var preparedCriterias = GetKeywordsList();
            var body = new OFBodySort();
            body.sort = new OFSortDateCreated();
            if (preparedCriterias.Count > 1)
            {
                var query = new OFQueryBoolMust<OFWildcard<OFSubjectWildcard>>();
                body.query = query;
                foreach (var preparedCriteria in preparedCriterias)
                {
                    var term = new OFWildcard<OFSubjectWildcard>(preparedCriteria.Result);
                    query._bool.must.Add(term);
                }
                return body;
            }
            if (preparedCriterias.All(p => p.Type == ofRuleType.Quote))
            {
                var criteria = preparedCriterias.FirstOrDefault(p => p.Type == ofRuleType.Quote);
                body.query = new OFQueryMatchPhrase<OFSubjectMatchPhrase>(new OFSubjectMatchPhrase() { subject = criteria.Result });
                return body;
            }
            body.query = new OFWildcard<OFSubjectWildcard>(Query);
            return body;
        }
        
        protected override IPromise<IList<ISort>> BuildAdvancedFieldSortSortSelector(SortDescriptor<OFEmail> sortFieldDescriptor)
        {
            if (AdvancedSearchCriterias.IsNull() ||
                AdvancedSearchCriterias.All(c => c.CriteriaType != AdvancedSearchCriteriaType.SortBy))
                return sortFieldDescriptor.Ascending(email => email.Datereceived);

            var sortingCriteria = AdvancedSearchCriterias.First(c => c.CriteriaType == AdvancedSearchCriteriaType.SortBy);
            var sort = (AdvancedSearchSortByType)sortingCriteria.Value;
            switch (sort)
            {
                case AdvancedSearchSortByType.NewestToOldest:
                    return sortFieldDescriptor.Descending(email => email.Datereceived);
                case AdvancedSearchSortByType.OldestToNewest:
                    return sortFieldDescriptor.Ascending(email => email.Datereceived);
                default:
                    return sortFieldDescriptor.Descending(email => email.Datereceived);
            }
        }


        protected override QueryContainer BuildAdvancedQuery(QueryContainerDescriptor<OFEmail> queryDescriptor)
        {
            if (AdvancedSearchCriterias.IsEmpty())
            {
                return new QueryContainer();
            }
            var listCriterias = new List<Func<QueryContainerDescriptor<OFEmail>, QueryContainer>>();
            foreach (var advancedSearchCriteria in AdvancedSearchCriterias)
            {
                if (advancedSearchCriteria.Value.IsNull() || advancedSearchCriteria.Value.IsStringEmptyOrNull())
                    continue;
                var temp = advancedSearchCriteria;
                switch (temp.CriteriaType)
                {
                    case AdvancedSearchCriteriaType.To:
                        var listShould = new List<Func<QueryContainerDescriptor<OFEmail>, QueryContainer>>();
                        listShould.Add(d => d.Wildcard(w => w.Field("to.address").Value(string.Format("*{0}*",temp.Value.ToLowerCase()))));
                        listShould.Add(d => d.Wildcard(w => w.Field("to.name").Value(string.Format("*{0}*", temp.Value.ToLowerCase()))));

                        listCriterias.Add(desc => desc.Bool(bd => bd.Should(listShould.ToArray())));

                        break;
                    case AdvancedSearchCriteriaType.Folder:
                        listCriterias.Add(d => d.Wildcard( w=> w.Field(e => e.Folder).Value(string.Format("*{0}*", temp.Value.ToLowerCase()))));
                        break;
                    case AdvancedSearchCriteriaType.Body:

                        var listTokens = GetProcessingSearchCriteria((string)temp.Value.ToLowerCase());

                        var listShouldBody = new List<Func<QueryContainerDescriptor<OFEmail>, QueryContainer>>();

                        foreach (var ofRuleToken in listTokens)
                        {
                            switch (ofRuleToken.Type)
                            {
                                case ofRuleType.Quote:
                                    listShouldBody.Add(d => d.MatchPhrase(m => m.Field(e => e.Analyzedcontent).Query(ofRuleToken.Result)));
                                    break;
                                default:
                                    listShouldBody.Add(d => d.Wildcard(w => w.Field(e => e.Analyzedcontent).Value(string.Format("*{0}*",ofRuleToken.Result.ToLowerInvariant()))));
                                    break;
                            }
                        }
                        listCriterias.Add(d => d.Bool(bd => bd.Should(listShouldBody.ToArray())));
                        break;
                }
            }
            return queryDescriptor.Bool(bd => bd.Must(listCriterias.ToArray()));
        }
    }//end EmailSubjectSearchRule

}//end namespace Implements