///////////////////////////////////////////////////////////
//  EmailSubjectSearchRule.cs
//  Implementation of the Class EmailSubjectSearchRule
//  Generated by Enterprise Architect
//  Created on:      29-Sep-2013 10:41:48 AM
//  Original author: Yariki
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Nest;
using WSUI.Core.Core.AdvancedSearchCriteria;
using WSUI.Core.Core.Rules;
using WSUI.Core.Data.ElasticSearch;
using WSUI.Core.Enums;
using WSUI.Core.Extensions;
using WSUI.Infrastructure.Implements.Rules.BaseRules;

namespace WSUI.Infrastructure.Implements.Rules
{
    public class EmailSubjectSearchRule : BaseEmailSearchRule
    {

        public EmailSubjectSearchRule()
        {
            Priority = 2;
        }

        public EmailSubjectSearchRule(object lockObject)
            : base(lockObject)
        {
            Priority = 2;
        }

        protected override bool GetIncludedInAdvancedMode()
        {
            return true;
        }

        public override void Init()
        {
            RuleName = "EmailSubject";
            base.Init();
        }

        protected override Expression<Func<WSUIEmail, string>> GetSearchedProperty()
        {
            return e => e.Subject;
        }

        protected override IFieldSort BuildAdvancedFieldSortSortSelector(SortFieldDescriptor<WSUIEmail> sortFieldDescriptor)
        {
            if (AdvancedSearchCriterias.IsNull() ||
               AdvancedSearchCriterias.All(c => c.CriteriaType != AdvancedSearchCriteriaType.SortBy))
                return sortFieldDescriptor.OnField(e => e.Datereceived);

            var sortingCriteria = AdvancedSearchCriterias.First(c => c.CriteriaType == AdvancedSearchCriteriaType.SortBy);
            var sort = (AdvancedSearchSortByType)sortingCriteria.Value;
            switch (sort)
            {
                case AdvancedSearchSortByType.NewestToOldest:
                    return  sortFieldDescriptor.OnField(e => e.Datereceived).Descending();
                case AdvancedSearchSortByType.OldestToNewest:
                    return sortFieldDescriptor.OnField(e => e.Datereceived).Ascending();
                default:
                    return sortFieldDescriptor.OnField(e => e.Datereceived);
            }
        }

        protected override QueryContainer BuildAdvancedQuery(QueryDescriptor<WSUIEmail> queryDescriptor)
        {
            if (AdvancedSearchCriterias.IsEmpty())
            {
                return new QueryContainer();
            }
            var listCriterias = new List<Func<QueryDescriptor<WSUIEmail>, QueryContainer>>();
            foreach (var advancedSearchCriteria in AdvancedSearchCriterias)
            {
                if (advancedSearchCriteria.Value.IsNull() || advancedSearchCriteria.Value.IsStringEmptyOrNull())
                    continue;
                var temp = advancedSearchCriteria;
                switch (temp.CriteriaType)
                {
                    case AdvancedSearchCriteriaType.To:
                        var listShould = new List<Func<QueryDescriptor<WSUIEmail>, QueryContainer>>();
                        listShould.Add(d => d.Term("to.address",temp.Value));
                        listShould.Add(d => d.Term("to.name", temp.Value));

                        listCriterias.Add(desc => desc.Bool(bd => bd.Should(listShould.ToArray())));

                        break;
                    case AdvancedSearchCriteriaType.Folder:
                        listCriterias.Add(d => d.Term(e => e.Folder, temp.Value));
                        break;
                    case AdvancedSearchCriteriaType.Body:
                        listCriterias.Add(d => d.Term(e => e.Analyzedcontent,temp.Value));
                        break;
                }
            }
            return queryDescriptor.Bool(bd => bd.Must(listCriterias.ToArray()));
        }
    }//end EmailSubjectSearchRule

}//end namespace Implements