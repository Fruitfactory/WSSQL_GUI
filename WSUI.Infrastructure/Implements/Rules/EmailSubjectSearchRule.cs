///////////////////////////////////////////////////////////
//  EmailSubjectSearchRule.cs
//  Implementation of the Class EmailSubjectSearchRule
//  Generated by Enterprise Architect
//  Created on:      29-Sep-2013 10:41:48 AM
//  Original author: Yariki
///////////////////////////////////////////////////////////


using System.Collections.Generic;
using System.Linq;
using WSUI.Core.Core.AdvancedSearchCriteria;
using WSUI.Core.Core.Rules;
using WSUI.Core.Enums;
using WSUI.Core.Extensions;
using WSUI.Infrastructure.Implements.Rules.BaseRules;

namespace WSUI.Infrastructure.Implements.Rules
{
    public class EmailSubjectSearchRule : BaseEmailSearchRule
    {

        private string AscTemplateFirst = "  ORDER BY System.Message.DateReceived ASC";
        private string AscTemplateContinue = " AND System.Message.DateReceived > '{0}' ORDER BY System.Message.DateReceived ASC";

        private string DescTemplate = " AND System.Message.DateReceived < '{0}' ORDER BY System.Message.DateReceived DESC";

        private string WhereTemplate =
            "WHERE CONTAINS(System.Kind,'email') AND System.Message.DateReceived < '{0}' AND CONTAINS(System.Subject,{1},1033) ORDER BY System.Message.DateReceived DESC";

        private string WhereAdvancedTemplate = "WHERE CONTAINS(System.Kind,'email')  AND {0} {1}";

        public EmailSubjectSearchRule()
        {
            Priority = 2;
        }

        public EmailSubjectSearchRule(object lockObject)
            : base(lockObject)
        {
            Priority = 2;
        }

        protected override string OnGenerateWherePart(IList<IRule> listCriterisRules)
        {
            var dateString = FormatDate(ref LastDate);
            var and = GetProcessingSearchCriteria(listCriterisRules).Item1;
            return string.Format(WhereTemplate, dateString, and);
        }

        protected override string OnGenerateAdvancedWherePart()
        {
            var dateString = FormatDate(ref LastDate);
            var advancedPart = ProcessAdvancedCriteria();
            var sortingPart = string.Format(ProcessSortingCriteria(),dateString);
            return string.Format(WhereAdvancedTemplate, advancedPart,sortingPart);
        }

        private string ProcessAdvancedCriteria()
        {
            if (AdvancedSearchCriterias.IsNull() || !AdvancedSearchCriterias.Any())
                return string.Empty;
            var criterias = new List<string>();

            foreach (var advancedSearchCriteria in AdvancedSearchCriterias)
            {
                if (advancedSearchCriteria.Value.IsNull() || advancedSearchCriteria.Value.IsStringEmptyOrNull())
                    continue;
                switch (advancedSearchCriteria.CriteriaType)
                {
                    case AdvancedSearchCriteriaType.To:
                        criterias.Add(string.Format("(CONTAINS(System.Message.ToAddress,'\"{0}*\"',1033) OR CONTAINS(System.Message.ToName,'\"{0}*\"',1033))", advancedSearchCriteria.Value));
                        break;
                    case AdvancedSearchCriteriaType.Folder:
                        criterias.Add(string.Format("CONTAINS(System.ItemUrl,'\"{0}*\"',1033)", advancedSearchCriteria.Value));
                        break;
                    case AdvancedSearchCriteriaType.Body:
                        criterias.Add(string.Format("CONTAINS(System.Search.Contents,'\"{0}\"',1033)", advancedSearchCriteria.Value));
                        break;
                }
            }

            return string.Join(" AND ", criterias);
        }

        private string ProcessSortingCriteria()
        {
            if (AdvancedSearchCriterias.IsNull() ||
                AdvancedSearchCriterias.All(c => c.CriteriaType != AdvancedSearchCriteriaType.SortBy))
                return string.Empty;

            var sortingCriteria = AdvancedSearchCriterias.First(c => c.CriteriaType == AdvancedSearchCriteriaType.SortBy);
            var sort = (AdvancedSearchSortByType)sortingCriteria.Value;
            switch (sort)
            {

                case AdvancedSearchSortByType.NewestToOldest:
                    return DescTemplate;
                case AdvancedSearchSortByType.OldestToNewest:
                    return IsInit ?  AscTemplateFirst : AscTemplateContinue;
                default:
                    return string.Empty;
            }
        }

        protected override bool GetIncludedInAdvancedMode()
        {
            return true;
        }

        public override void Init()
        {
            RuleName = "EmailSubject";
            base.Init();
        }
    }//end EmailSubjectSearchRule

}//end namespace Implements