///////////////////////////////////////////////////////////
//  QueryGenerator.cs
//  Implementation of the Class QueryGenerator
//  Generated by Enterprise Architect
//  Created on:      28-Sep-2013 1:56:28 PM
//  Original author: Yariki
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using WSUI.Core.Interfaces;

namespace WSUI.Core.Utils 
{
	public class QueryGenerator : IQueryGenerator 
	{

		
		protected QueryGenerator()
		{

		}

		private static Lazy<IQueryGenerator> _instance = new Lazy<IQueryGenerator>(() => {
																							var inst = new QueryGenerator();
																							inst.Init();
																							return inst;
																							});
		
		public static IQueryGenerator Instance 
		{
			get{return _instance.Value;}
		}
		
		/// 
		/// <param name="type"></param>
		/// <param name="searchCriteria"></param>
		/// <param name="exludeIgnored"></param>
		public string GenerateQuery(Type type, string searchCriteria,int topResult, IRuleQueryGenerator ruleQueryGenerator, bool exludeIgnored = false)
		{

			return "";
		}

		private void Init()
		{}
		
		private Tuple<string,int> GetFieldsList(Type type, bool exludeIgnoread)
		{
            return null;
		    
		}

	    private string GenerateSelectPart(IList<Tuple<string, int>> list, int top)
	    {
	        return null;
	    }

	    private string GenerateFromPart()
	    {
	        return null;
	    }

	    private string GenerateWherePart(IRuleQueryGenerator ruleQueryGenerator)
	    {
	        return null;
	    }
		
		
	}//end QueryGenerator

}//end namespace Utils