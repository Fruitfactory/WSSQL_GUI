///////////////////////////////////////////////////////////
//  QueryReader.cs
//  Implementation of the Class QueryReader
//  Generated by Enterprise Architect
//  Created on:      29-Sep-2013 9:24:58 PM
//  Original author: Yariki
///////////////////////////////////////////////////////////


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Linq.Expressions;
using WSUI.Core.Interfaces;
using WSUI.Core.Logger;

namespace WSUI.Core.Utils 
{
    internal static class New<T> where T : new()
    {
        public static readonly Func<T> Instance = Expression.Lambda<Func<T>>(Expression.New(typeof (T))).Compile();
    }

	public class QueryReader<T> : IQueryReader where T : new()
    {
        #region [needs]

	    private IList<Tuple<string, string, int, bool>> _intermalList;
        private Func<T> _create;

        #endregion

        private QueryReader(IList<Tuple<string, string, int, bool>> fields )
        {
            _intermalList = fields;
            _create = New<T>.Instance;
        }

	    public static QueryReader<T> CreateNewReader<T>(IList<Tuple<string, string, int, bool>> listFields ) where T : new()
	    {
	        return new QueryReader<T>(listFields); 
	    }

		/// 
		/// <param name="reader"></param>
		/// <param name="type"></param>
		public object ReadResult(IDataReader reader)
		{
            var result = _create.Invoke() as ISearchObject;//Activator.CreateInstance(typeof(T)) as ISearchObject;//
		    if (result == null)
		        return null;

		    foreach (var tuple in _intermalList)
		    {
		        try
		        {
                    int index = tuple.Item3 - 1;
                    if (index >= reader.FieldCount)
                        break;
                    object val = reader[index];
                    if (DBNull.Value.Equals(val))
                        continue;
                    result.SetValue(tuple.Item3, val);
		        }
		        catch (Exception ex)
		        {
                    WSSqlLogger.Instance.LogError("Readresult: {0}",ex.Message);
                }
		    }
			return result;
		}

	}//end QueryReader

}//end namespace Utils