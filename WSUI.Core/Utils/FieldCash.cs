///////////////////////////////////////////////////////////
//  FieldCash.cs
//  Implementation of the Class FieldCash
//  Generated by Enterprise Architect
//  Created on:      29-Sep-2013 9:40:47 PM
//  Original author: Yariki
///////////////////////////////////////////////////////////


using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using WSUI.Core.Core.Attributes;
using WSUI.Core.Interfaces;

namespace WSUI.Core.Utils 
{
	public class FieldCash : IFieldCash
	{
        private ConcurrentDictionary<Type, IList<Tuple<string, string, int, bool>>> _internalCash = new ConcurrentDictionary<Type, IList<Tuple<string, string, int, bool>>>(); 

		protected FieldCash(){

		}

        #region [instance]

        private static Lazy<IFieldCash> _instance = new Lazy<IFieldCash>(() =>
        {
            var inst = new FieldCash();
            inst.Init();
            return inst;
        });


	    public static IFieldCash Instance
	    {
	        get { return _instance.Value; }
	    }

        #endregion


        private void Init()
	    {
	        
	    }

	    /// 
	    /// <param name="type"></param>
	    /// <param name="exludeIgnored"></param>
	    public IList<Tuple<string,string,int,bool>> GetFields(Type type,bool exludeIgnored)
        {
	        if (_internalCash.ContainsKey(type))
	        {
	            return GetExistList(type);
	        }
	        var result = CreateCashRecordForType(type, exludeIgnored);
	        return result;
        }

        private IList<Tuple<string,string,int,bool>> CreateCashRecordForType(Type type, bool exludeIgnored)
        {
            var list = GetFields(type);
            _internalCash.TryAdd(type,list);
            return list.ToList();
        }

	    private IList<Tuple<string, string, int, bool>> GetFields(Type type)
	    {
	        var listResult = new List<Tuple<string, string, int, bool>>();
	        if (type.BaseType != null)
	        {
	            GetBaseFields(listResult, type.BaseType);
	        }
            GetListValue(listResult,type);
	        return listResult;
	    }

	    private void GetBaseFields(IList<Tuple<string, string, int, bool>> list, Type baseType)
	    {
	        if (baseType.BaseType == null)
	        {
	            GetListValue(list, baseType);
	        }
	        else
	        {
                GetBaseFields(list,baseType.BaseType);
	            GetListValue(list,baseType);
	        }
	    }

	    private void GetListValue(IList<Tuple<string, string, int, bool>> list, Type baseType)
	    {
	        var l = GetFieldsList(baseType);
	        foreach (var tuple in l)
	        {
	            list.Add(tuple);
	        }
	    }

	    private IList<Tuple<string, string, int, bool>> GetFieldsList(Type type)
	    {
	        var list = new List<Tuple<string, string, int, bool>>();
	        var props = GetPropertyInfos(type);
	        foreach (var propertyInfo in props)
	        {
	            var attr = GetAttribute(propertyInfo);
	            if (attr != null)
	            {
	                var tuple = new Tuple<string, string, int, bool>(propertyInfo.Name, attr.FieldName, attr.Index,
	                    attr.CanBeIgnored);
                    list.Add(tuple);
	            }
	        }
	        return list;
	    }

	    private IList<PropertyInfo> GetPropertyInfos(Type type)
	    {
	        return
	            type.GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance |
	                               System.Reflection.BindingFlags.DeclaredOnly).ToList();
	    }

	    private FieldAttribute GetAttribute(PropertyInfo pi)
	    {
	        var propertyInfos = pi.GetCustomAttributes(typeof (FieldAttribute), false);
	        return (FieldAttribute) (propertyInfos.Length > 0 ? propertyInfos[0] : null);
	    }


	    private IList<Tuple<string, string, int, bool>> GetExistList(Type type)
	    {
	        var result = _internalCash[type].ToList();
	        return result;
	    }



	}//end FieldCash

}//end namespace Utils