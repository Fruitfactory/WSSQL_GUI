///////////////////////////////////////////////////////////
//  BaseEmailSearchObject.cs
//  Implementation of the Class BaseEmailSearchObject
//  Generated by Enterprise Architect
//  Created on:      27-Sep-2013 1:33:39 AM
//  Original author: Yariki
///////////////////////////////////////////////////////////

using System;
using System.Globalization;
using System.Text.RegularExpressions;
using WSUI.Core.Core.Attributes;
using WSUI.Core.Helpers;
using WSUI.Core.Extensions;

namespace WSUI.Core.Data
{
    public class BaseEmailSearchObject : BaseSearchObject
    {
        #region [needs]

        private string _fromEmailName = string.Empty;
        

        #endregion [needs]

        [Field("System.Message.ConversationID", 7, false)]
        public string ConversationId { get; set; }

        [Field("System.Message.ToAddress", 8, false)]
        public string[] ToAddress { get; set; }

        [Field("System.Message.DateReceived", 9, false)]
        public DateTime DateReceived { get; set; }

        [Field("System.Message.ConversationIndex", 10, false)]
        public string ConversationIndex { get; set; }

        [Field("System.Message.FromAddress", 11, false)]
        public string[] FromAddress { get; set; }

        [Field("System.Message.FromName", 12, false)]
        public string[] FromName { get; set; }

        [Field("System.Message.SenderAddress", 13, false)]
        public string[] SenderAddress { get; set; }

        [Field("System.Message.SenderName", 14, false)]
        public string[] SenderName { get; set; }

        //[Field("System.Message.HasAttachments", 15, false)]
        private bool? _internalHasAttachment = null;

        public bool HasAttachments
        {
            get { return InternalCheckAttachment(); }
        }

        private bool InternalCheckAttachment()
        {
            if (_internalHasAttachment.HasValue)
                return _internalHasAttachment.Value;
            _internalHasAttachment = OutlookHelper.Instance.HasAttachment(this);
            return _internalHasAttachment.Value;
        }

        public string From
        {
            get
            {
                if (string.IsNullOrEmpty(_fromEmailName))
                {
                    _fromEmailName = GetEmailOrName(FromAddress, FromName);
                    if (string.IsNullOrEmpty(_fromEmailName))
                        _fromEmailName = GetEmailOrName(SenderAddress, SenderName);
                }
                return _fromEmailName;
            }
        }

        public BaseEmailSearchObject()
        {
        }

        public override void SetValue(int index, object value)
        {
            base.SetValue(index, value);
            switch (index)
            {
                case 7:
                    ConversationId = value as string;
                    break;

                case 8:
                    ToAddress = value as string[];
                    break;

                case 9:
                    DateReceived = (DateTime)Convert.ChangeType(value, typeof(DateTime), CultureInfo.InvariantCulture);
                    break;

                case 10:
                    ConversationIndex = value as string;
                    break;

                case 11:
                    FromAddress = value as string[];
                    break;

                case 12:
                    FromName = value as string[];
                    break;

                case 13:
                    SenderAddress = CheckValidType(value);
                    break;

                case 14:
                    SenderName = CheckValidType(value);
                    break;
                //case 15:
                //    HasAttachments = (bool) value;
                //break;
            }
        }

        private string GetEmailOrName(string[] address, string[] name)
        {
            if (address == null || address.Length == 0)
            {
                return GetFieldValue(FromName);
            }
            foreach (string email in address)
            {
                if (IsEmail(email))
                {
                    _fromEmailName = email;
                    break;
                }
            }
            return string.IsNullOrEmpty(_fromEmailName) ? (_fromEmailName = GetFieldValue(name)) : _fromEmailName;
        }

        private string GetFieldValue(string[] val)
        {
            return val != null && val.Length > 0 ? val[0] : string.Empty;
        }

        private bool IsEmail(string email)
        {
            return email.IsEmail();
        }

        private string[] CheckValidType(object val)
        {
            if (val != null && val.GetType().IsArray)
            {
                return val as string[];
            }
            return new string[] { val as string };
        }
    }//end BaseEmailSearchObject
}//end namespace Data