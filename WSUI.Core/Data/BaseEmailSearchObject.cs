///////////////////////////////////////////////////////////
//  BaseEmailSearchObject.cs
//  Implementation of the Class BaseEmailSearchObject
//  Generated by Enterprise Architect
//  Created on:      27-Sep-2013 1:33:39 AM
//  Original author: Yariki
///////////////////////////////////////////////////////////


using System;
using System.Globalization;
using System.Text.RegularExpressions;
using WSUI.Core.Core.Attributes;
namespace WSUI.Core.Data 
{
	public class BaseEmailSearchObject : BaseSearchObject
    {

        #region [needs]

	    private string _fromEmailName = string.Empty;
        private const string EmailPattern = @"\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\.)+[A-Z]{2,4}\b";

        #endregion


        [Field("System.Message.ConversationID", 7, false)]
		public string ConversationId{ get;  set;}

        [Field("System.Message.ToAddress", 8, false)]
		public string[] ToAddress{ get;  set;}

        [Field("System.Message.DateReceived", 9, false)]
		public DateTime DateReceived{ get;  set;}

        [Field("System.Message.ConversationIndex", 10, false)]
        public string ConversationIndex { get; set; }

        [Field("System.Message.FromAddress", 11, false)]
        public string[] FromAddress { get; set; }

        [Field("System.Message.FromName", 12, false)]
	    public string FromName { get; set; }

        [Field("System.Message.FromAddress", 13, false)]
        public string[] SenderAddress { get; set; }

        [Field("System.Message.FromName", 14, false)]
        public string SenderName { get; set; }


	    public string Recepient
	    {
	        get
	        {
	            if (string.IsNullOrEmpty(_fromEmailName))
	            {
	                _fromEmailName = GetFromEmailOrName();
	                if (string.IsNullOrEmpty(_fromEmailName))
	                    _fromEmailName = GetSenderEmailOrName();
	            }
	            return _fromEmailName;
	        }
	    }

        public BaseEmailSearchObject()
        {

		}

	    public override void SetValue(int index, object value)
	    {
	        base.SetValue(index, value);
	        switch (index)
	        {
	            case 7:
	                ConversationId = value as string;
	                break;
                case 8:
	                ToAddress = value as string[];
	                break;
                case 9:
	                DateReceived = (DateTime) Convert.ChangeType(value, typeof (DateTime), CultureInfo.InvariantCulture);
	                break;
                case 10:
	                ConversationIndex = value as string;
	                break;
                case 11:
	                FromAddress = value as string[];
	                break;
                case 12:
	                FromName = value as string;
	                break;
                case 13:
	                SenderAddress = value as string[];
	                break;
                case 14:
	                SenderName = value as string;
	                break;
	        }
	    }


        private string GetFromEmailOrName()
        {
            if (FromAddress == null || FromAddress.Length == 0)
            {
                return GetFieldValue(FromName);
            }
            foreach (string email in FromAddress)
            {
                if (IsEmail(email))
                {
                    _fromEmailName = email;
                    break;
                }
            }
            return string.IsNullOrEmpty(_fromEmailName) ? (_fromEmailName = GetFieldValue(FromName)) : _fromEmailName;
        }

	    private string GetSenderEmailOrName()
	    {
            if (SenderAddress == null || SenderAddress.Length == 0)
            {
                return GetFieldValue(SenderName);
            }
            foreach (string email in SenderAddress)
            {
                if (IsEmail(email))
                {
                    _fromEmailName = email;
                    break;
                }
            }
            return string.IsNullOrEmpty(_fromEmailName) ? (_fromEmailName = GetFieldValue(SenderName)) : _fromEmailName;
	    }

	    private string GetFieldValue(string val)
	    {
	        return string.IsNullOrEmpty(val) ? string.Empty : val;
	    }


        private bool IsEmail(string email)
        {
            return !string.IsNullOrEmpty(email) && Regex.IsMatch(email, EmailPattern, RegexOptions.IgnoreCase);
        }

    }//end BaseEmailSearchObject

}//end namespace Data